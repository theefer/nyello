  [-] Architecture of the elements
  [-] Overall structure of the classes and modules
  [X] Connect modules
  [X] Simple commands (start, pause, stop)
  [X] Parse arguments to commands
  [X] More commands (previous, next)
  [X] Playlist basic commands (list of PL, save as, delete)
  [X] Handle playlists internally (use)
  [X] Prepare an output module to show results (column objects, displayable entry objects)
  [X] Develop a clever Printable class usable for diff. types of data (value, retrieval)
  [X] Test the output module (list songs, current playlist, given playlist)
  [X] More features in output (selection, counter column, align, zero-count of songs in playlist)
  [X] Develop pattern representation
  [X] Pattern parsing into the representation
  [X] Command-line arguments to the program parsed as commands
  [X] Pattern testing with medialib (info, enqueue)
R [+] New enqueue methods (replace, insert) when available in clientlib
  ==> v0.1

  [ ] Code cleanup, bugs, FIXME's (Printable class tree, playlist-list, etc)
  [ ] Improve help (command line -h and per-command)
R [ ] More commands (remove, status, clear, playlist-shuffle, filter)
  ==> v0.2

  [ ] Make readline use async, redesign main-loop, remove waits
  [ ] Brainstorm on abstraction layer, make it reliable, dynamic (broadcast, etc)
R [ ] Design proper abstraction layer (all async events, current PL, collections)
  [ ] Develop collection handling and classes
  [ ] Save collections in a file (apply, save as, delete)
R [ ] Handle collections internally (enter)
R [ ] Randomize playlist from a collection (playlist-random)

Other stuff:
- ignore and protect playlists starting with '_'
- read the XMMS_PATH env var to open the server connection
- When no metadata is present, display Title=filename
- Free all the allocated memory, i.e. fix the leaks!
- Correct display, using wcs instead of str?

Check:
* Playlist sequence: seq shouldn't have ids starting at 1, but at 0!
  generalize?
